<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Ethos Runner (Final Branding)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Press+Start+2P', 'Press Start 2P', cursive;
            background-color: #dbeafe;
            color: #1e293b;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            overflow: hidden;
        }
        #gameContainer {
            width: 100%;
            max-width: 800px;
            text-align: center;
            padding: 1rem;
        }
        canvas {
            display: block;
            border-radius: 12px;
            box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            width: 100%;
            height: auto;
            border: 3px solid #6366f1;
        }
        #infoPanel {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 1rem;
            margin-bottom: 1rem;
        }
        #audioControlBtn {
            background-color: #6366f1;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 8px;
            font-size: 0.7rem;
            cursor: pointer;
        }
        #modal {
            background-color: rgba(26, 32, 44, 0.85);
            color: white;
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 40px;
            border-radius: 12px;
            text-align: center;
            display: none;
            border: 2px solid #4a5568;
        }
        #modal h2 { font-size: 2rem; margin-bottom: 1rem; color: #f87171; }
        #modal p { font-size: 1.2rem; margin-bottom: 2rem; }
        #restartButton {
            background-color: #48bb78;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: background-color 0.3s;
            text-transform: uppercase;
        }
        #restartButton:hover { background-color: #38a169; }
        .instruction-text { margin-top: 1rem; font-size: 0.8rem; color: #475569; }
    </style>
</head>
<body>

<div id="gameContainer">
    <div id="infoPanel">
        <h1 class="text-2xl md:text-3xl">Ethos Runner</h1>
        <button id="audioControlBtn">AUDIO: ON</button>
        <div id="score" class="text-xl md:text-2xl">SKOR: 0</div>
    </div>
    <canvas id="gameCanvas"></canvas>
    <p class="instruction-text">Tekan SPASI atau TAP layar untuk MELOMPAT</p>
</div>

<div id="modal">
    <h2>Game Over</h2>
    <p>Skor Akhir: <span id="finalScore">0</span></p>
    <button id="restartButton">Mulai Lagi</button>
</div>

<script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const scoreElement = document.getElementById('score');
    const modal = document.getElementById('modal');
    const finalScoreElement = document.getElementById('finalScore');
    const restartButton = document.getElementById('restartButton');
    const audioControlBtn = document.getElementById('audioControlBtn');

    let canvasWidth = 800;
    let canvasHeight = 400;
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;

    let score = 0, gameSpeed = 5, gameFrame = 0, gameOver = false;

    // --- PENGATURAN AUDIO ---
    let audioCtx;
    let isMuted = false;
    let musicInterval;
    const noteSequence = [261, 293, 329, 349, 392, 440, 493, 523];
    
    function initAudio() { if (!audioCtx) audioCtx = new (window.AudioContext || window.webkitAudioContext)(); }
    function playSound(type) {
        if (!audioCtx || isMuted) return;
        const osc = audioCtx.createOscillator(), gain = audioCtx.createGain();
        osc.connect(gain); gain.connect(audioCtx.destination);
        if (type === 'jump') {
            osc.type = 'triangle'; osc.frequency.setValueAtTime(600, audioCtx.currentTime);
            gain.gain.setValueAtTime(0.1, audioCtx.currentTime); gain.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + 0.2);
            osc.start(audioCtx.currentTime); osc.stop(audioCtx.currentTime + 0.2);
        } else if (type === 'gameOver') {
            osc.type = 'sawtooth'; osc.frequency.setValueAtTime(400, audioCtx.currentTime);
            osc.frequency.exponentialRampToValueAtTime(100, audioCtx.currentTime + 0.5);
            gain.gain.setValueAtTime(0.2, audioCtx.currentTime); gain.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + 0.5);
            osc.start(audioCtx.currentTime); osc.stop(audioCtx.currentTime + 0.5);
        }
    }
    function playBackgroundMusic() {
        if (!audioCtx || isMuted || musicInterval) return;
        let noteIndex = 0;
        musicInterval = setInterval(() => {
            if (gameOver || isMuted) { clearInterval(musicInterval); musicInterval = null; return; }
            const osc = audioCtx.createOscillator(), gain = audioCtx.createGain();
            osc.connect(gain); gain.connect(audioCtx.destination);
            osc.type = 'sine'; osc.frequency.setValueAtTime(noteSequence[noteIndex % noteSequence.length], audioCtx.currentTime);
            gain.gain.setValueAtTime(0.08, audioCtx.currentTime); gain.gain.exponentialRampToValueAtTime(0.0001, audioCtx.currentTime + 0.15);
            osc.start(audioCtx.currentTime); osc.stop(audioCtx.currentTime + 0.15);
            noteIndex++;
        }, 250);
    }
    function stopBackgroundMusic() { if (musicInterval) { clearInterval(musicInterval); musicInterval = null; } }
    audioControlBtn.addEventListener('click', () => {
        isMuted = !isMuted; audioControlBtn.textContent = isMuted ? 'AUDIO: OFF' : 'AUDIO: ON';
        if (!isMuted && !gameOver) { initAudio(); playBackgroundMusic(); } else { stopBackgroundMusic(); }
    });

    // Elemen Latar Belakang
    let clouds = [], hills = [];

    const player = {
        w: 50, h: 60, x: 50, y: canvasHeight - 90,
        velocityY: 0, jumpPower: -16, gravity: 0.7, isJumping: false
    };

    const obstacles = [];

    // --- FUNGSI MENGGAMBAR ELEMEN VISUAL ---
    function drawHill(x, y, width, height, color) { ctx.fillStyle = color; ctx.beginPath(); ctx.moveTo(x, y); ctx.quadraticCurveTo(x + width / 2, y - height, x + width, y); ctx.fill(); }
    function drawCloud(x, y, size) { ctx.fillStyle = 'white'; ctx.beginPath(); ctx.arc(x, y, size, 0, Math.PI * 2); ctx.arc(x + size * 1.2, y, size * 1.2, 0, Math.PI * 2); ctx.arc(x + size * 0.5, y - size * 0.5, size * 0.8, 0, Math.PI * 2); ctx.arc(x + size * 0.6, y + size * 0.4, size * 0.9, 0, Math.PI * 2); ctx.fill(); }
    function drawGround() { ctx.fillStyle = '#d97706'; ctx.fillRect(0, canvas.height - 30, canvas.width, 30); ctx.fillStyle = '#92400e'; ctx.fillRect(0, canvas.height - 20, canvas.width, 20); }
    
    // --- FUNGSI BARU: MENGGAMBAR TULISAN BRANDING ---
    function drawBranding() {
        ctx.save();
        ctx.globalAlpha = 0.3; // Buat tulisan lebih transparan
        const textY = 100;
        
        // Mengukur lebar total teks untuk penempatan di tengah
        ctx.font = "bold 70px 'Times New Roman', serif";
        const ethWidth = ctx.measureText("Eth").width;
        ctx.font = "bold 70px 'Arial', sans-serif";
        const osWidth = ctx.measureText("OS").width;
        const totalWidth = ethWidth + osWidth;
        const startX = canvas.width / 2 - totalWidth / 2;

        // Gambar "Eth"
        ctx.font = "bold 70px 'Times New Roman', serif";
        ctx.fillStyle = "#1e293b"; // Hitam kebiruan
        ctx.fillText("Eth", startX, textY);
        
        // Gambar "OS"
        ctx.font = "bold 70px 'Arial', sans-serif";
        ctx.fillStyle = "#6366f1"; // Biru muda
        ctx.fillText("OS", startX + ethWidth, textY);
        
        ctx.restore();
    }

    function handleBackground() {
        if (gameFrame % 250 === 0) clouds.push({ x: canvas.width, y: Math.random() * 100 + 50, size: Math.random() * 20 + 15, speed: 0.3 });
        if (gameFrame % 300 === 0) {
            hills.push({ x: canvas.width, y: canvas.height - 30, width: Math.random() * 200 + 150, height: Math.random() * 80 + 40, color: '#22c55e', speed: 0.5 });
            hills.push({ x: canvas.width, y: canvas.height - 30, width: Math.random() * 100 + 100, height: Math.random() * 50 + 20, color: '#16a34a', speed: 0.2 });
        }
        hills.sort((a, b) => a.speed - b.speed);
        [...clouds, ...hills].forEach(el => {
            el.x -= gameSpeed * el.speed;
            if (el.size) drawCloud(el.x, el.y, el.size);
            else drawHill(el.x, el.y, el.width, el.height, el.color);
        });
        clouds = clouds.filter(c => c.x + (c.size * 3) > 0);
        hills = hills.filter(h => h.x + h.width > 0);
    }

    function drawPlayer(p) {
        const x = p.x, y = p.y, w = p.w, h = p.h;
        const gradient = ctx.createLinearGradient(x, y, x + w, y);
        gradient.addColorStop(0, '#a3bffa'); gradient.addColorStop(1, '#6366f1');
        ctx.beginPath(); ctx.moveTo(x + w / 2, y); ctx.lineTo(x + w, y + h / 2); ctx.lineTo(x + w / 2, y + h); ctx.lineTo(x, y + h / 2); ctx.closePath();
        ctx.fillStyle = gradient; ctx.fill(); ctx.strokeStyle = 'black'; ctx.lineWidth = 3; ctx.stroke();
        ctx.beginPath(); ctx.moveTo(x + w / 2, y); ctx.lineTo(x + w / 2 - 5, y + h / 2); ctx.lineTo(x + w / 2 + 5, y + h / 2); ctx.lineTo(x + w / 2, y + h); ctx.stroke();
        ctx.fillStyle = 'black'; ctx.fillRect(x + w * 0.25 - 2, y + h * 0.3, 4, 4); ctx.fillRect(x + w * 0.75 - 2, y + h * 0.3, 4, 4);
        ctx.beginPath(); ctx.arc(x + w / 2, y + h * 0.6, w * 0.3, 0, Math.PI, false); ctx.stroke();
    }
    
    function handleObstacles() {
        if (gameFrame % 90 === 0 && Math.random() > 0.2) {
            const height = Math.random() * 60 + 40; const width = Math.random() * 20 + 30;
            obstacles.push({ x: canvas.width, y: canvas.height - height - 30, width: width, height: height, color: '#4d7c0f' });
        }
        obstacles.forEach(ob => { ob.x -= gameSpeed; ctx.fillStyle = ob.color; ctx.fillRect(ob.x, ob.y, ob.width, ob.height); });
        obstacles.forEach((ob, index) => { if (ob.x + ob.width < 0) setTimeout(() => obstacles.splice(index, 1), 0); });
    }

    function checkCollision() {
        obstacles.forEach(ob => {
            if (player.x < ob.x + ob.width && player.x + player.w > ob.x && player.y < ob.y + ob.height && player.y + player.h > ob.y) gameOver = true;
        });
        if (player.y > canvasHeight) gameOver = true;
    }

    function jump() {
        initAudio(); if (!player.isJumping) { playSound('jump'); player.velocityY = player.jumpPower; player.isJumping = true; }
    }

    function restart() {
        modal.style.display = 'none'; obstacles.length = 0; clouds.length = 0; hills.length = 0;
        player.y = canvas.height - player.h - 30; player.velocityY = 0; player.isJumping = false;
        score = 0; gameSpeed = 5; gameFrame = 0; gameOver = false;
        animate(); playBackgroundMusic();
    }
    
    // --- LOOP UTAMA GAME ---
    function animate() {
        if (gameOver) {
            stopBackgroundMusic(); playSound('gameOver');
            finalScoreElement.textContent = Math.floor(score);
            modal.style.display = 'block'; return;
        }
        ctx.fillStyle = '#5c94fc'; ctx.fillRect(0, 0, canvas.width, canvas.height); // 1. Langit
        drawBranding(); // 2. Tulisan Branding
        handleBackground(); // 3. Latar Belakang Parallax
        drawGround(); // 4. Tanah
        player.velocityY += player.gravity; player.y += player.velocityY;
        if (player.y > canvas.height - player.h - 30) {
            player.y = canvas.height - player.h - 30; player.isJumping = false; player.velocityY = 0;
        }
        drawPlayer(player); // 5. Player
        handleObstacles(); // 6. Rintangan
        checkCollision(); // 7. Cek Tabrakan
        score += 0.1; gameSpeed += 0.002;
        scoreElement.textContent = 'SKOR: ' + Math.floor(score);
        gameFrame++;
        requestAnimationFrame(animate);
    }

    window.addEventListener('keydown', (e) => { if (e.code === 'Space' || e.code === 'ArrowUp') { e.preventDefault(); jump(); } });
    window.addEventListener('touchstart', (e) => { e.preventDefault(); jump(); });
    restartButton.addEventListener('click', restart);

    animate();
</script>

</body>
</html>

